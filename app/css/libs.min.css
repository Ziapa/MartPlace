/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */button,hr,input{overflow:visible}progress,sub,sup{vertical-align:baseline}[type=checkbox],[type=radio],legend{box-sizing:border-box;padding:0}html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}details,main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:ButtonText dotted 1px}fieldset{padding:.35em .75em .625em}legend{color:inherit;display:table;max-width:100%;white-space:normal}textarea{overflow:auto}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}[hidden],template{display:none}_.breakpoints.sort(function(a,b){return ( _.options.mobileFirst ) ? a-b:b-a}; Slick.prototype.setCSS = function(position){y = _.positionProp == 'top' ? Math.ceil(position) + 'px':'0px'}); _.$slides.eq(_.currentSlide).css({zIndex:_.options.zIndex - 1,opacity: 1}else{indexOffset = _.options.infinite === true ? _.options.slidesToShow + index:index;mfp.items = $.isArray(data.items) ? data.items:[data.items]}; Slick.prototype.selectHandler = function(event){var targetElement =
            $(event.target) .is('.slick-slide') ?
                $(event.target):$(event.target) .parents('.slick-slide')}; Slick.prototype.swipeMove = function(event){touches = event.originalEvent !== undefined ? event.originalEvent.touches:null}; $.magnificPopup.registerModule(INLINE_NS,{options:{ hiddenClass: 'hide',//will be appended with `mfp-` prefix markup: '',tNotFound: 'Content not found'},proto:{initInline:function() { mfp.types.push(INLINE_NS); _mfpOn(CLOSE_EVENT+'.'+INLINE_NS,function() { _putInlineElementsBack(); }); },getInline: function(item,template) { _putInlineElementsBack(); if(item.src) { var inlineSt = mfp.st.inline,el = $(item.src); if(el.length) {//If target element has parent - we replace it with placeholder and put it back after popup is closed var parent = el[0].parentNode; if(parent && parent.tagName) { if(!_inlinePlaceholder) { _hiddenClass = inlineSt.hiddenClass; _inlinePlaceholder = _getEl(_hiddenClass); _hiddenClass = 'mfp-'+_hiddenClass; }//replace target inline element with placeholder _lastInlineElement = el.after(_inlinePlaceholder) .detach() .removeClass(_hiddenClass); } mfp.updateStatus('ready'); } else { mfp.updateStatus('error',inlineSt.tNotFound); el = $('<div>'); } item.inlineElement = el; return el; } mfp.updateStatus('ready'); mfp._parseMarkup(template,{},item); return template; };initAjax:function() { mfp.types.push(AJAX_NS); _ajaxCur = mfp.st.ajax.cursor; _mfpOn(CLOSE_EVENT+'.'+AJAX_NS,_destroyAjaxRequest); _mfpOn('BeforeChange.' + AJAX_NS,_destroyAjaxRequest); },getAjax: function(item) { if(_ajaxCur) { $(document.body) .addClass(_ajaxCur); } mfp.updateStatus('loading'); var opts = $.extend({ url: item.src,success: function(data,textStatus,jqXHR) { var temp = { data:data,xhr:jqXHR }; _mfpTrigger('ParseAjax',temp); mfp.appendContent($(temp.data),AJAX_NS); item.finished = true; _removeAjaxCursor(); mfp._setFocus(); setTimeout(function() { mfp.wrap.addClass(READY_CLASS); },16); mfp.updateStatus('ready'); _mfpTrigger('AjaxContentAdded'); },error: function() { _removeAjaxCursor(); item.finished = item.loadError = true; mfp.updateStatus('error',mfp.st.ajax.tError.replace('%url%',item.src)); } },mfp.st.ajax.settings); mfp.req = $.ajax(opts); return ''; };initImage:function() { var imgSt = mfp.st.image,ns = '.image'; mfp.types.push('image'); _mfpOn(OPEN_EVENT+ns,function() { if(mfp.currItem.type === 'image' && imgSt.cursor) { $(document.body) .addClass(imgSt.cursor); } }); _mfpOn(CLOSE_EVENT+ns,function() { if(imgSt.cursor) { $(document.body) .removeClass(imgSt.cursor); } _window.off('resize' + EVENT_NS); }); _mfpOn('Resize'+ns,mfp.resizeImage); if(mfp.isLowIE) { _mfpOn('AfterChange',mfp.resizeImage); } },resizeImage: function() { var item = mfp.currItem; if(!item || !item.img) return; if(mfp.st.image.verticalFit) { var decr = 0;//fix box-sizing in ie7/8 if(mfp.isLowIE) { decr = parseInt(item.img.css('padding-top'),10) + parseInt(item.img.css('padding-bottom'),10); } item.img.css('max-height',mfp.wH-decr); } },_onImageHasSize: function(item) { if(item.img) { item.hasSize = true; if(_imgInterval) { clearInterval(_imgInterval); } item.isCheckingImgSize = false; _mfpTrigger('ImageHasSize',item); if(item.imgHidden) { if(mfp.content) mfp.content.removeClass('mfp-loading'); item.imgHidden = false; } } },findImageSize: function(item) { var counter = 0,img = item.img[0],mfpSetInterval = function(delay) { if(_imgInterval) { clearInterval(_imgInterval); }//decelerating interval that checks for size of an image _imgInterval = setInterval(function() { if(img.naturalWidth > 0) { mfp._onImageHasSize(item); return; } if(counter > 200) { clearInterval(_imgInterval); } counter++; if(counter === 3) { mfpSetInterval(10); } else if(counter === 40) { mfpSetInterval(50); } else if(counter === 100) { mfpSetInterval(500); } },delay); }; mfpSetInterval(1); },getImage: function(item,template) { var guard = 0,//image load complete handler onLoadComplete = function() { if(item) { if (item.img[0].complete) { item.img.off('.mfploader'); if(item === mfp.currItem) { mfp._onImageHasSize(item); mfp.updateStatus('ready'); } item.hasSize = true; item.loaded = true; _mfpTrigger('ImageLoadComplete'); } else {//if image complete check fails 200 times (20 sec),we assume that there was an error. guard++; if(guard < 200) { setTimeout(onLoadComplete,100); } else { onLoadError(); } } } },//image error handler onLoadError = function() { if(item) { item.img.off('.mfploader'); if(item === mfp.currItem) { mfp._onImageHasSize(item); mfp.updateStatus('error',imgSt.tError.replace('%url%',item.src)); } item.hasSize = true; item.loaded = true; item.loadError = true; } },imgSt = mfp.st.image; var el = template.find('.mfp-img'); if(el.length) { var img = document.createElement('img'); img.className = 'mfp-img'; if(item.el && item.el.find('img') .length) { img.alt = item.el.find('img') .attr('alt'); } item.img = $(img) .on('load.mfploader',onLoadComplete) .on('error.mfploader',onLoadError); img.src = item.src;//without clone() "error" event is not firing when IMG is replaced by new IMG//TODO: find a way to avoid such cloning if(el.is('img')) { item.img = item.img.clone(); } img = item.img[0]; if(img.naturalWidth > 0) { item.hasSize = true; } else if(!img.width) { item.hasSize = false; } } mfp._parseMarkup(template,{ title: _getTitle(item),img_replaceWith: item.img },item); mfp.resizeImage(); if(item.hasSize) { if(_imgInterval) clearInterval(_imgInterval); if(item.loadError) { template.addClass('mfp-loading'); mfp.updateStatus('error',imgSt.tError.replace('%url%',item.src)); } else { template.removeClass('mfp-loading'); mfp.updateStatus('ready'); } return template; } mfp.updateStatus('loading'); item.loading = true; if(!item.hasSize) { item.imgHidden = true; template.addClass('mfp-loading'); mfp.findImageSize(item); } return template; };initZoom:function() { var zoomSt = mfp.st.zoom,ns = '.zoom',image; if(!zoomSt.enabled || !mfp.supportsTransition) { return; } var duration = zoomSt.duration,getElToAnimate = function(image) { var newImg = image.clone() .removeAttr('style') .removeAttr('class') .addClass('mfp-animated-image'),transition = 'all '+(zoomSt.duration/1000) +'s ' + zoomSt.easing,cssObj = { position: 'fixed',zIndex: 9999,left: 0,top: 0,'-webkit-backface-visibility': 'hidden' },t = 'transition'; cssObj['-webkit-'+t] = cssObj['-moz-'+t] = cssObj['-o-'+t] = cssObj[t] = transition; newImg.css(cssObj); return newImg; },showMainContent = function() { mfp.content.css('visibility','visible'); },openTimeout,animatedImg; _mfpOn('BuildControls'+ns,function() { if(mfp._allowZoom()) { clearTimeout(openTimeout); mfp.content.css('visibility','hidden'); // Basically,all code below does is clones existing image,puts in on top of the current one and animated it image = mfp._getItemToZoom(); if(!image) { showMainContent(); return; } animatedImg = getElToAnimate(image); animatedImg.css(mfp._getOffset()); mfp.wrap.append(animatedImg); openTimeout = setTimeout(function() { animatedImg.css(mfp._getOffset(true)); openTimeout = setTimeout(function() { showMainContent(); setTimeout(function() { animatedImg.remove(); image = animatedImg = null; _mfpTrigger('ZoomAnimationEnded'); },16); // avoid blink when switching images },duration); // this timeout equals animation duration },16); // by adding this timeout we avoid short glitch at the beginning of animation // Lots of timeouts... } }); _mfpOn(BEFORE_CLOSE_EVENT+ns,function() { if(mfp._allowZoom()) { clearTimeout(openTimeout); mfp.st.removalDelay = duration; if(!image) { image = mfp._getItemToZoom(); if(!image) { return; } animatedImg = getElToAnimate(image); } animatedImg.css(mfp._getOffset(true)); mfp.wrap.append(animatedImg); mfp.content.css('visibility','hidden'); setTimeout(function() { animatedImg.css(mfp._getOffset()); },16); } }); _mfpOn(CLOSE_EVENT+ns,function() { if(mfp._allowZoom()) { showMainContent(); if(animatedImg) { animatedImg.remove(); } image = null; } }); },_allowZoom: function() { return mfp.currItem.type === 'image'; },_getItemToZoom: function() { if(mfp.currItem.hasSize) { return mfp.currItem.img; } else { return false; } },//Get element postion relative to viewport _getOffset: function(isLarge) { var el; if(isLarge) { el = mfp.currItem.img; } else { el = mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem); } var offset = el.offset(); var paddingTop = parseInt(el.css('padding-top'),10); var paddingBottom = parseInt(el.css('padding-bottom'),10); offset.top -= ($(window) .scrollTop() - paddingTop); var obj = { width: el.width(),//fix Zepto height+padding issue height: (_isJQ ? el.innerHeight() : el[0].offsetHeight) - paddingBottom - paddingTop };//I hate to do this,but there is no another option if(getHasMozTransform()) { obj['-moz-transform'] = obj['transform'] = 'translate(' + offset.left + 'px,' + offset.top + 'px)'; } else { obj.left = offset.left; obj.top = offset.top; } return obj; }}; $.magnificPopup.registerModule(AJAX_NS,{options:{ settings: null,cursor: 'mfp-ajax-cur',tError: '<a href="%url%">The content</a> could not be loaded.'}; $.magnificPopup.registerModule('image',{options:{ markup: '<div class="mfp-figure">'+ '<div class="mfp-close"></div>'+ '<figure>'+ '<div class="mfp-img"></div>'+ '<figcaption>'+ '<div class="mfp-bottom-bar">'+ '<div class="mfp-title"></div>'+ '<div class="mfp-counter"></div>'+ '</div>'+ '</figcaption>'+ '</figure>'+ '</div>',cursor: 'mfp-zoom-out-cur',titleSrc: 'title',verticalFit: true,tError: '<a href="%url%">The image</a> could not be loaded.'}; $.magnificPopup.registerModule('zoom',{options:{ enabled: false,easing: 'ease-in-out',duration: 300,opener: function(element) { return element.is('img') ? element : element.find('img'); }}; $.magnificPopup.registerModule(IFRAME_NS,{options:{ markup: '<div class="mfp-iframe-scaler">'+ '<div class="mfp-close"></div>'+ '<iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe>'+ '</div>',srcAction: 'iframe_src',//we don't care and support only one default type of URL by default
		patterns: {
			youtube: {
				index: 'youtube.com',
				id: 'v=',
				src: '//www.youtube.com/embed/%id%?autoplay=1'
			},
			vimeo: {
				index: 'vimeo.com/',
				id: '/',
				src: '//player.vimeo.com/video/%id%?autoplay=1'
			},
			gmaps: {
				index: '//maps.google.',
				src: '%id%&output=embed'
			}
		}
	},

	proto: {
		initIframe: function() {
			mfp.types.push(IFRAME_NS);

			_mfpOn('BeforeChange', function(e, prevType, newType) {
				if(prevType !== newType) {
					if(prevType === IFRAME_NS) {
						_fixIframeBugs(); // iframe if removed
					} else if(newType === IFRAME_NS) {
						_fixIframeBugs(true); // iframe is showing
					}
				}// else {
					// iframe source is switched, don't do anything//}; $.magnificPopup.registerModule('gallery',{options:{ enabled: false,arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload: [0,2],navigateByImgClick: true,arrows: true,tPrev: 'Previous (Left arrow key)',tNext: 'Next (Right arrow key)',tCounter: '%curr% of %total%' },proto: { initGallery: function() { var gSt = mfp.st.gallery,ns = '.mfp-gallery'; mfp.direction = true;//true - next,false - prev if(!gSt || !gSt.enabled) return false; _wrapClasses += ' mfp-gallery'; _mfpOn(OPEN_EVENT+ns,function() { if(gSt.navigateByImgClick) { mfp.wrap.on('click'+ns,'.mfp-img',function() { if(mfp.items.length > 1) { mfp.next(); return false; } });}); _mfpOn(MARKUP_PARSE_EVENT+ns,function(e,element,values,item){values.counter = l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l):''},preloadNearbyImages: function(){i <= (mfp.direction ? preloadAfter:preloadBefore);i <= (mfp.direction ? preloadBefore:preloadAfter)},); var RETINA_NS = 'retina'; $.magnificPopup.registerModule(RETINA_NS{options:{ replaceSrc: function(item) { return item.src.replace(/\.\w+$/,function(m) { return '@2x' + m; }); },ratio: 1//Function or number. Set to 1 to disable. },proto: { initRetina: function() { if(window.devicePixelRatio > 1) { var st = mfp.st.retina,ratio = st.ratio; ratio = !isNaN(ratio) ? ratio : ratio(); if(ratio > 1) { _mfpOn('ImageHasSize' + '.' + RETINA_NS,function(e,item) { item.img.css({ 'max-width': item.img[0].naturalWidth / ratio,'width': '100%' }); }); _mfpOn('ElementParse' + '.' + RETINA_NS,function(e,item) { item.src = st.replaceSrc(item,ratio); });}));